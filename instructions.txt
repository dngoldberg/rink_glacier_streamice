GET ACCOUNT ON LONESTAR6
=======================

i. go to https://portal.tacc.utexas.edu/ and create a TACC account. 
ii. Be sure to enable multi factor authentication (i use google authentication app)
iii. Get owner (Ginny) to add you to project DPP22001.
iv. Read the lonestar6 documentation regarding how to log in via a terminal.

SET UP YOUR ENVIRONMENT AND WORK FOLDER ON LONESTAR 6
=======================================================

Once you log in, your current directory will be on the Login node. You should do everything on the drive $WORK, which will map to your own /work directory. 

PETSc is a computational library that if made use of can speed up STREAMICE by 2x to 3x. The TACC versions are configured incorrectly so we need to install our own version.

A. get the code / scripts / input repo for rink:

cd $WORK
git clone https://github.com/dngoldberg/rink_glacier_streamice.git

B. replace your bash configuration file. In rink_glacier_streamice/lonestar_scripts, there is a file called "bashrc_ls6_short". Open this file in vi, there are prompts to make some modifications for certain paths. Do this, and then save file file and replace your bashrc with the following:

cp bashrc_ls6_short ~/.bashrc

C. INSTALL PETSC.

I recommend 3.14.2 as i know it works. Do the following steps to install.

1. cd $WORK
2. wget https://www.mcs.anl.gov/petsc/mirror/release-snapshots/petsc-3.14.2.tar.gz
3. tar -xzvf petsc-3.14.2.tar.gz
4. cd petsc-3.14.2
5. ./configure --configModules=PETSc.Configure --optionsModule=config.compilerOptions --known-mpi-c-double-complex=1 --with-ar=ar --with-batch=0 --with-cc=mpicc --with-clib-autodetect=1 --with-cxx=mpicc --with-cxxlib-autodetect=1 --with-debugging=0 --with-dependencies=0 --with-fc=mpiifort --with-fortran-datatypes=1 --with-fortran-interfaces=1 --with-fortran-bindings=1 --with-fortranlib-autodetect=1 --with-ranlib=ranlib --with-scalar-type=real --with-shared-ld=ar --with-etags=0 --with-x=0 --with-ssl=0 --with-shared-libraries=1 --with-blaslapack=1 --with-scalapack=1 --with-mumps=0

At this point, you will not be able to compile correctly unless you are on a compute node. The next step will begin a short interactive session on a compute node. You will eventually get a command prompt again.

6. idev -A DPP22001 -p vm-small
7. make all
8. make test
9. exit 

this last step ensures you are off the compute node, which eats into our allocation!


BUILD THE RINK INVERSION EXPERIMENT
==================================

In order to build the adjoint model, we need OpenAD. And, in order to run OpenAD, we need singularity. Think of Singularity as a "virtual machine" even though it is actually a virtual operating system, which is something different. MITgcm will be compiled within this "virtual machine" but the result will be simply a program which can be run on the *actual* computer. TACC computers have singularity installed, but it is only available on compute nodes.

1. Obtaining the singularity container. 

i. launch an interactive batch: 
idev -A DPP22001 -p vm-small

ii. navigate (cd) to a place on $WORK where you will store the OpenAD "container" file. You do not need to do anything else with this file, the scripts you run will use it. Maybe create a folder under $WORK called "openad", and within the folder do the following command:
singularity pull library://jahn/default/openad:latest

now, you can end the interactive batch, and pick up later when you are ready to compile..

2. Building the executable

i. go to the folder lonestar_scripts/ and open make_ls6.sh. At line 21, there is a variable that should be set to the path to your openad container that you downloaded above. make this change.

ii. Now once again start an interactive batch, and, in lonestar_scripts run the command
bash make_ls6.sh.

You will now need to wait 7-10 minutes for the process to complete. This is because (a) OpenAD differentiation to generate new code files is very slow, and (b) the compilation of the resulting code needs to run in a single thread, which is really the fault of MITgcm developers. 

We are hopeful within the year that we can use Tapenade rather than OpenAD, which will mean no singularity, no interactive batch, and shorter compilation time. Patrick's student Shreyas is working on this and would be a good contact if you wish to know more about automatic differentiation.


RUNNING THE INVERSION
=====================
